{
  "openapi": "3.0.0",
  "info": {
    "title": "JobConnect API",
    "description": "API for JobConnect job portal",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.jobconnect.com/v1",
      "description": "Main (production) server"
    },
    {
      "url": "https://localhost/3001",
      "description": "Internal staging server for testing"
    }
  ],
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "example": "Olivia"
          },
          "lastName": {
            "type": "string",
            "example": "Pope"
          },
          "email": {
            "type": "string",
            "example": "olivia.pope@example.com"
          },
          "password": {
            "type": "string",
            "example": "hashedpassword"
          }
        },
        "required": ["firstName", "lastName", "email", "password"]
      },
      "Candidate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "firstName": {
            "type": "string",
            "example": "Olivia"
          },
          "lastName": {
            "type": "string",
            "example": "Pope"
          },
          "email": {
            "type": "string",
            "example": "olivia.pope@example.com"
          }
        },
        "required": ["firstName", "lastName", "email"]
      }
    }
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Create a new user account",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "summary": "Login an existing user",
        "description": "Authenticate an existing user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ik9saXZpYSBQb3BlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/user": {
      "get": {
        "summary": "Get the current user's profile",
        "description": "Retrieve the current user's profile information",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update the current user's profile",
        "description": "Update the current user's profile information",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the current user's profile",
        "description": "Delete the current user's profile",
        "responses": {
          "200": {
            "description": "User profile deleted successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User profile not found"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "summary": "Logout the current user",
        "description": "Logout the current user",
        "responses": {
          "200": {
            "description": "User logged out successfully"
          }
        }
      }
    },
    "/api/candidates": {
      "get": {
        "summary": "Get a list of all candidates",
        "description": "Retrieve a list of all candidates",
        "responses": {
          "200": {
            "description": "List of candidates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Candidate"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new candidate",
        "description": "Register a new candidate",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Candidate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Candidate created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          }
        }
      }
    },
    "/api/candidates/{candidateId}": {
      "get": {
        "summary": "Get a candidate by ID",
        "description": "Retrieve a candidate by their ID",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "description": "The ID of the candidate to return",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "400": {
            "description": "The specified candidate ID is invalid (not a number)"
          },
          "404": {
            "description": "A candidate with the specified ID was not found"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      },
      "put": {
        "summary": "Update a candidate",
        "description": "Update a candidate's information",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "description": "The ID of the candidate to update",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Candidate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Candidate updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Candidate"
                }
              }
            }
          },
          "400": {
            "description": "The specified candidate ID is invalid (not a number)"
          },
          "404": {
            "description": "A candidate with the specified ID was not found"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      },
      "delete": {
        "summary": "Delete a candidate",
        "description": "Delete a candidate by their ID",
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "required": true,
            "description": "The ID of the candidate to delete",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate deleted successfully"
          },
          "400": {
            "description": "The specified candidate ID is invalid (not a number)"
          },
          "404": {
            "description": "A candidate with the specified ID was not found"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    }
  }
}
